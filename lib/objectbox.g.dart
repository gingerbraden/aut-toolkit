// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/challenging_behaviour/data/model/challenging_behaviour_diary_entry_entity.dart';
import 'features/challenging_behaviour/data/model/challenging_behaviour_entity.dart';
import 'features/eating_habits/data/model/eating_habit_entity.dart';
import 'features/good_habits/data/model/good_habit_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 139465113525671056),
    name: 'ChallengingBehaviourDiaryEntryEntity',
    lastPropertyId: const obx_int.IdUid(9, 8473330541405588167),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3276799885575513242),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1996232934584247842),
        name: 'challengingBehaviourId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 7265063553320486894),
        relationTarget: 'ChallengingBehaviourEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3810550962242010286),
        name: 'location',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4327789277245649275),
        name: 'date',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2257877021023419224),
        name: 'duration',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 5067823526267149243),
        name: 'circumstances',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 6317075041900276104),
        name: 'people',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 9114528613422825857),
        name: 'outcome',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 8473330541405588167),
        name: 'reflection',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 6231389929878358286),
    name: 'ChallengingBehaviourEntity',
    lastPropertyId: const obx_int.IdUid(6, 3653867454443783666),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 957492046697605941),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3447244676382177609),
        name: 'occuring',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8814747557842586450),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 9102207563706588597),
        name: 'from',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1746883064538615473),
        name: 'generalDescription',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3653867454443783666),
        name: 'userId',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'diaryEntries',
        srcEntity: 'ChallengingBehaviourDiaryEntryEntity',
        srcField: '',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 1812295606420934787),
    name: 'EatingHabitEntity',
    lastPropertyId: const obx_int.IdUid(7, 2753014414256372943),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6931242426439301705),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8423343766618127990),
        name: 'to',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6790623775884093556),
        name: 'isEatingFlag',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2624360315488368124),
        name: 'from',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8315437001960652234),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7309644610374706293),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 2753014414256372943),
        name: 'userId',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 4139673972050310461),
    name: 'GoodHabitEntity',
    lastPropertyId: const obx_int.IdUid(6, 6350548586302974283),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6926905718660631014),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5210479876626957908),
        name: 'from',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2843212185898592918),
        name: 'userId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1556262315733938184),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5234794128667873739),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6350548586302974283),
        name: 'isOccuringFlag',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(6, 4139673972050310461),
    lastIndexId: const obx_int.IdUid(1, 7265063553320486894),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [1777307641083598478, 6112168635049409585],
    retiredIndexUids: const [],
    retiredPropertyUids: const [
      591679213236383350,
      7323305404545168403,
      1219579721037450855,
      593779817146309026,
      1176311604953178663,
      3518344782468400788,
      4393786231541083778,
      4128286833958398028,
      5353683167311258387,
      69716348719230726,
      1233996314118088075,
      6645588857862198462,
      938737596790947008,
      8520208140183450181,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    ChallengingBehaviourDiaryEntryEntity:
        obx_int.EntityDefinition<ChallengingBehaviourDiaryEntryEntity>(
          model: _entities[0],
          toOneRelations: (ChallengingBehaviourDiaryEntryEntity object) => [
            object.challengingBehaviour,
          ],
          toManyRelations: (ChallengingBehaviourDiaryEntryEntity object) => {},
          getId: (ChallengingBehaviourDiaryEntryEntity object) => object.id,
          setId: (ChallengingBehaviourDiaryEntryEntity object, int id) {
            object.id = id;
          },
          objectToFB:
              (ChallengingBehaviourDiaryEntryEntity object, fb.Builder fbb) {
                final locationOffset = fbb.writeString(object.location);
                final circumstancesOffset = fbb.writeString(
                  object.circumstances,
                );
                final peopleOffset = fbb.writeList(
                  object.people.map(fbb.writeString).toList(growable: false),
                );
                final outcomeOffset = fbb.writeString(object.outcome);
                final reflectionOffset = fbb.writeString(object.reflection);
                fbb.startTable(10);
                fbb.addInt64(0, object.id ?? 0);
                fbb.addInt64(1, object.challengingBehaviour.targetId);
                fbb.addOffset(2, locationOffset);
                fbb.addInt64(3, object.date.millisecondsSinceEpoch);
                fbb.addInt64(4, object.duration);
                fbb.addOffset(5, circumstancesOffset);
                fbb.addOffset(6, peopleOffset);
                fbb.addOffset(7, outcomeOffset);
                fbb.addOffset(8, reflectionOffset);
                fbb.finish(fbb.endTable());
                return object.id ?? 0;
              },
          objectFromFB: (obx.Store store, ByteData fbData) {
            final buffer = fb.BufferContext(fbData);
            final rootOffset = buffer.derefObject(0);
            final idParam = const fb.Int64Reader().vTableGetNullable(
              buffer,
              rootOffset,
              4,
            );
            final locationParam = const fb.StringReader(
              asciiOptimization: true,
            ).vTableGet(buffer, rootOffset, 8, '');
            final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
            );
            final durationParam = const fb.Int64Reader().vTableGet(
              buffer,
              rootOffset,
              12,
              0,
            );
            final circumstancesParam = const fb.StringReader(
              asciiOptimization: true,
            ).vTableGet(buffer, rootOffset, 14, '');
            final peopleParam = const fb.ListReader<String>(
              fb.StringReader(asciiOptimization: true),
              lazy: false,
            ).vTableGet(buffer, rootOffset, 16, []);
            final outcomeParam = const fb.StringReader(
              asciiOptimization: true,
            ).vTableGet(buffer, rootOffset, 18, '');
            final reflectionParam = const fb.StringReader(
              asciiOptimization: true,
            ).vTableGet(buffer, rootOffset, 20, '');
            final object = ChallengingBehaviourDiaryEntryEntity(
              id: idParam,
              location: locationParam,
              date: dateParam,
              duration: durationParam,
              circumstances: circumstancesParam,
              people: peopleParam,
              outcome: outcomeParam,
              reflection: reflectionParam,
            );
            object.challengingBehaviour.targetId = const fb.Int64Reader()
                .vTableGet(buffer, rootOffset, 6, 0);
            object.challengingBehaviour.attach(store);
            return object;
          },
        ),
    ChallengingBehaviourEntity:
        obx_int.EntityDefinition<ChallengingBehaviourEntity>(
          model: _entities[1],
          toOneRelations: (ChallengingBehaviourEntity object) => [],
          toManyRelations: (ChallengingBehaviourEntity object) => {
            obx_int.RelInfo<ChallengingBehaviourDiaryEntryEntity>.toOneBacklink(
              2,
              object.id!,
              (ChallengingBehaviourDiaryEntryEntity srcObject) =>
                  srcObject.challengingBehaviour,
            ): object.diaryEntries,
          },
          getId: (ChallengingBehaviourEntity object) => object.id,
          setId: (ChallengingBehaviourEntity object, int id) {
            object.id = id;
          },
          objectToFB: (ChallengingBehaviourEntity object, fb.Builder fbb) {
            final nameOffset = fbb.writeString(object.name);
            final generalDescriptionOffset = fbb.writeString(
              object.generalDescription,
            );
            final userIdOffset = fbb.writeString(object.userId);
            fbb.startTable(7);
            fbb.addInt64(0, object.id ?? 0);
            fbb.addBool(1, object.occuring);
            fbb.addOffset(2, nameOffset);
            fbb.addInt64(3, object.from.millisecondsSinceEpoch);
            fbb.addOffset(4, generalDescriptionOffset);
            fbb.addOffset(5, userIdOffset);
            fbb.finish(fbb.endTable());
            return object.id ?? 0;
          },
          objectFromFB: (obx.Store store, ByteData fbData) {
            final buffer = fb.BufferContext(fbData);
            final rootOffset = buffer.derefObject(0);
            final idParam = const fb.Int64Reader().vTableGetNullable(
              buffer,
              rootOffset,
              4,
            );
            final nameParam = const fb.StringReader(
              asciiOptimization: true,
            ).vTableGet(buffer, rootOffset, 8, '');
            final fromParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
            );
            final generalDescriptionParam = const fb.StringReader(
              asciiOptimization: true,
            ).vTableGet(buffer, rootOffset, 12, '');
            final diaryEntriesParam =
                obx.ToMany<ChallengingBehaviourDiaryEntryEntity>();
            final occuringParam = const fb.BoolReader().vTableGet(
              buffer,
              rootOffset,
              6,
              false,
            );
            final userIdParam = const fb.StringReader(
              asciiOptimization: true,
            ).vTableGet(buffer, rootOffset, 14, '');
            final object = ChallengingBehaviourEntity(
              id: idParam,
              name: nameParam,
              from: fromParam,
              generalDescription: generalDescriptionParam,
              diaryEntries: diaryEntriesParam,
              occuring: occuringParam,
              userId: userIdParam,
            );
            obx_int.InternalToManyAccess.setRelInfo<ChallengingBehaviourEntity>(
              object.diaryEntries,
              store,
              obx_int.RelInfo<
                ChallengingBehaviourDiaryEntryEntity
              >.toOneBacklink(
                2,
                object.id!,
                (ChallengingBehaviourDiaryEntryEntity srcObject) =>
                    srcObject.challengingBehaviour,
              ),
            );
            return object;
          },
        ),
    EatingHabitEntity: obx_int.EntityDefinition<EatingHabitEntity>(
      model: _entities[2],
      toOneRelations: (EatingHabitEntity object) => [],
      toManyRelations: (EatingHabitEntity object) => {},
      getId: (EatingHabitEntity object) => object.id,
      setId: (EatingHabitEntity object, int id) {
        object.id = id;
      },
      objectToFB: (EatingHabitEntity object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final descriptionOffset = fbb.writeString(object.description);
        final userIdOffset = fbb.writeString(object.userId);
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.to?.millisecondsSinceEpoch);
        fbb.addBool(2, object.isEatingFlag);
        fbb.addInt64(3, object.from.millisecondsSinceEpoch);
        fbb.addOffset(4, nameOffset);
        fbb.addOffset(5, descriptionOffset);
        fbb.addOffset(6, userIdOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final toValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          6,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final fromParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
        );
        final toParam = toValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(toValue);
        final isEatingFlagParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          8,
          false,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final userIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final object = EatingHabitEntity(
          id: idParam,
          from: fromParam,
          to: toParam,
          isEatingFlag: isEatingFlagParam,
          name: nameParam,
          description: descriptionParam,
          userId: userIdParam,
        );

        return object;
      },
    ),
    GoodHabitEntity: obx_int.EntityDefinition<GoodHabitEntity>(
      model: _entities[3],
      toOneRelations: (GoodHabitEntity object) => [],
      toManyRelations: (GoodHabitEntity object) => {},
      getId: (GoodHabitEntity object) => object.id,
      setId: (GoodHabitEntity object, int id) {
        object.id = id;
      },
      objectToFB: (GoodHabitEntity object, fb.Builder fbb) {
        final userIdOffset = fbb.writeString(object.userId);
        final nameOffset = fbb.writeString(object.name);
        final descriptionOffset = fbb.writeString(object.description);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.from.millisecondsSinceEpoch);
        fbb.addOffset(2, userIdOffset);
        fbb.addOffset(3, nameOffset);
        fbb.addOffset(4, descriptionOffset);
        fbb.addBool(5, object.isOccuringFlag);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final fromParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
        );
        final userIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final isOccuringFlagParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          14,
          false,
        );
        final object = GoodHabitEntity(
          id: idParam,
          from: fromParam,
          userId: userIdParam,
          name: nameParam,
          description: descriptionParam,
          isOccuringFlag: isOccuringFlagParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ChallengingBehaviourDiaryEntryEntity] entity fields to define ObjectBox queries.
class ChallengingBehaviourDiaryEntryEntity_ {
  /// See [ChallengingBehaviourDiaryEntryEntity.id].
  static final id =
      obx.QueryIntegerProperty<ChallengingBehaviourDiaryEntryEntity>(
        _entities[0].properties[0],
      );

  /// See [ChallengingBehaviourDiaryEntryEntity.challengingBehaviour].
  static final challengingBehaviour =
      obx.QueryRelationToOne<
        ChallengingBehaviourDiaryEntryEntity,
        ChallengingBehaviourEntity
      >(_entities[0].properties[1]);

  /// See [ChallengingBehaviourDiaryEntryEntity.location].
  static final location =
      obx.QueryStringProperty<ChallengingBehaviourDiaryEntryEntity>(
        _entities[0].properties[2],
      );

  /// See [ChallengingBehaviourDiaryEntryEntity.date].
  static final date =
      obx.QueryDateProperty<ChallengingBehaviourDiaryEntryEntity>(
        _entities[0].properties[3],
      );

  /// See [ChallengingBehaviourDiaryEntryEntity.duration].
  static final duration =
      obx.QueryIntegerProperty<ChallengingBehaviourDiaryEntryEntity>(
        _entities[0].properties[4],
      );

  /// See [ChallengingBehaviourDiaryEntryEntity.circumstances].
  static final circumstances =
      obx.QueryStringProperty<ChallengingBehaviourDiaryEntryEntity>(
        _entities[0].properties[5],
      );

  /// See [ChallengingBehaviourDiaryEntryEntity.people].
  static final people =
      obx.QueryStringVectorProperty<ChallengingBehaviourDiaryEntryEntity>(
        _entities[0].properties[6],
      );

  /// See [ChallengingBehaviourDiaryEntryEntity.outcome].
  static final outcome =
      obx.QueryStringProperty<ChallengingBehaviourDiaryEntryEntity>(
        _entities[0].properties[7],
      );

  /// See [ChallengingBehaviourDiaryEntryEntity.reflection].
  static final reflection =
      obx.QueryStringProperty<ChallengingBehaviourDiaryEntryEntity>(
        _entities[0].properties[8],
      );
}

/// [ChallengingBehaviourEntity] entity fields to define ObjectBox queries.
class ChallengingBehaviourEntity_ {
  /// See [ChallengingBehaviourEntity.id].
  static final id = obx.QueryIntegerProperty<ChallengingBehaviourEntity>(
    _entities[1].properties[0],
  );

  /// See [ChallengingBehaviourEntity.occuring].
  static final occuring = obx.QueryBooleanProperty<ChallengingBehaviourEntity>(
    _entities[1].properties[1],
  );

  /// See [ChallengingBehaviourEntity.name].
  static final name = obx.QueryStringProperty<ChallengingBehaviourEntity>(
    _entities[1].properties[2],
  );

  /// See [ChallengingBehaviourEntity.from].
  static final from = obx.QueryDateProperty<ChallengingBehaviourEntity>(
    _entities[1].properties[3],
  );

  /// See [ChallengingBehaviourEntity.generalDescription].
  static final generalDescription =
      obx.QueryStringProperty<ChallengingBehaviourEntity>(
        _entities[1].properties[4],
      );

  /// See [ChallengingBehaviourEntity.userId].
  static final userId = obx.QueryStringProperty<ChallengingBehaviourEntity>(
    _entities[1].properties[5],
  );

  /// see [ChallengingBehaviourEntity.diaryEntries]
  static final diaryEntries =
      obx.QueryBacklinkToMany<
        ChallengingBehaviourDiaryEntryEntity,
        ChallengingBehaviourEntity
      >(ChallengingBehaviourDiaryEntryEntity_.challengingBehaviour);
}

/// [EatingHabitEntity] entity fields to define ObjectBox queries.
class EatingHabitEntity_ {
  /// See [EatingHabitEntity.id].
  static final id = obx.QueryIntegerProperty<EatingHabitEntity>(
    _entities[2].properties[0],
  );

  /// See [EatingHabitEntity.to].
  static final to = obx.QueryDateProperty<EatingHabitEntity>(
    _entities[2].properties[1],
  );

  /// See [EatingHabitEntity.isEatingFlag].
  static final isEatingFlag = obx.QueryBooleanProperty<EatingHabitEntity>(
    _entities[2].properties[2],
  );

  /// See [EatingHabitEntity.from].
  static final from = obx.QueryDateProperty<EatingHabitEntity>(
    _entities[2].properties[3],
  );

  /// See [EatingHabitEntity.name].
  static final name = obx.QueryStringProperty<EatingHabitEntity>(
    _entities[2].properties[4],
  );

  /// See [EatingHabitEntity.description].
  static final description = obx.QueryStringProperty<EatingHabitEntity>(
    _entities[2].properties[5],
  );

  /// See [EatingHabitEntity.userId].
  static final userId = obx.QueryStringProperty<EatingHabitEntity>(
    _entities[2].properties[6],
  );
}

/// [GoodHabitEntity] entity fields to define ObjectBox queries.
class GoodHabitEntity_ {
  /// See [GoodHabitEntity.id].
  static final id = obx.QueryIntegerProperty<GoodHabitEntity>(
    _entities[3].properties[0],
  );

  /// See [GoodHabitEntity.from].
  static final from = obx.QueryDateProperty<GoodHabitEntity>(
    _entities[3].properties[1],
  );

  /// See [GoodHabitEntity.userId].
  static final userId = obx.QueryStringProperty<GoodHabitEntity>(
    _entities[3].properties[2],
  );

  /// See [GoodHabitEntity.name].
  static final name = obx.QueryStringProperty<GoodHabitEntity>(
    _entities[3].properties[3],
  );

  /// See [GoodHabitEntity.description].
  static final description = obx.QueryStringProperty<GoodHabitEntity>(
    _entities[3].properties[4],
  );

  /// See [GoodHabitEntity.isOccuringFlag].
  static final isOccuringFlag = obx.QueryBooleanProperty<GoodHabitEntity>(
    _entities[3].properties[5],
  );
}
